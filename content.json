{"pages":[],"posts":[{"title":"数据结构与算法","text":"Java 数组实现环形队列说明： front为列首，rear为列尾 + 1 使用取模运算是为了构成环形。当被除数小于除数时，取模返回值为被除数；当被除数等于除数时，取模返回 0 1234567891011121314151617181920212223242526272829303132333435363738394041424344public class ArrQueue { private int front; private int rear; private final int[] queue; private final int maxSize; public ArrQueue(int size) { this.queue = new int[size + 1]; this.front = 0; this.rear = 0; //由于约定一个空间不存放数据，加一使使用时传入的size为可用空间数 this.maxSize = size + 1; } public boolean isEmpty() { return rear == front; } public boolean isFull() { return (rear + 1) % maxSize == front; } public void add(int data) { if (!isFull()) { queue[rear] = data; rear = (rear + 1) % maxSize; System.out.println(&quot;保存数据，DATA：&quot; + data); return; } throw new RuntimeException(&quot;队列已满,DATA:&quot; + data); } public int getHead() { if (isEmpty()) { throw new RuntimeException(&quot;无数据&quot;); } int data = queue[front];// -1 代表无数据// queue[front] = -1; front = (front + 1) % maxSize; return data; }}","link":"/2022/03/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"algorithm","slug":"algorithm","link":"/tags/algorithm/"}],"categories":[]}